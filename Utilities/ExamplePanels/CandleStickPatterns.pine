// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © TrendX_

//@version=5
indicator("Candlestick Patterns Backtester [Optimized]", shorttitle = "CS Patterns", overlay = true)

// ═══════════════════ INPUTS ═══════════════════
enableDynamicSignals = input.bool(true, "Enable Dynamic Signals", group="📊 Signals")
showBuyBadges = input.bool(true, "Show Buy Badges", group="📊 Signals")
showSellBadges = input.bool(true, "Show Sell Badges", group="📊 Signals")
showActiveTable = input.bool(true, "Show Active Patterns Table", group="📊 Signals")

// Filtering criteria
minWinRate = input.float(0.50, "Min Win Rate", minval=0.0, maxval=1.0, step=0.01, group="🎯 Filters")
minProfitFactor = input.float(1.2, "Min Profit Factor", minval=0.1, maxval=10.0, step=0.1, group="🎯 Filters")
minTotalTrades = input.int(5, "Min Total Trades", minval=1, maxval=100, step=1, group="🎯 Filters")
useOrLogic = input.bool(false, "Use OR Logic", group="🎯 Filters")

// Colors
buyColor = input.color(color.new(color.lime, 20), "Buy Color", group="🎨 Colors")
sellColor = input.color(color.new(color.red, 20), "Sell Color", group="🎨 Colors")

// Debug options
showDebugTable = input.bool(false, "Show All Patterns Debug Table", group="🔍 Debug")

// Exit condition
exitSMA = input.int(8, "Exit SMA Period", group="⚙️ Settings")

// ═══════════════════ VARIABLES ═══════════════════
var bool dynamicBuySignal = false
var bool dynamicSellSignal = false
var activePatterns = array.new<string>()
var activeWinRates = array.new<float>()
var activeProfitFactors = array.new<float>()
var activeTable = table.new(position.middle_right, 4, 20, bgcolor=color.black, border_width=1)
var debugTable = table.new(position.top_left, 5, 15, bgcolor=color.black, border_width=1)

// ═══════════════════ CORE FUNCTIONS ═══════════════════

// Unified backtesting function
backtest(condition, isLong) =>
    var entry = 0.0
    var trades = array.new<float>()
    var wins = array.new<float>()
    
    exitCondition = ta.cross(close, ta.sma(close, exitSMA))
    
    if condition
        entry := close
    
    if exitCondition and entry > 0
        pnl = isLong ? (close - entry) / entry * 100 : (entry - close) / entry * 100
        array.push(trades, pnl)
        if pnl > 0
            array.push(wins, pnl)
        entry := 0
    
    totalTrades = array.size(trades)
    winTrades = array.size(wins)
    netProfit = totalTrades > 0 ? array.sum(trades) : 0
    winRate = totalTrades > 0 ? winTrades / totalTrades : 0
    grossProfit = winTrades > 0 ? array.sum(wins) : 0
    grossLoss = netProfit - grossProfit
    profitFactor = grossLoss != 0 ? math.abs(grossProfit / grossLoss) : 0
    
    [netProfit, profitFactor, totalTrades, winRate]

// Check if pattern meets criteria
meetsCriteria(winRate, profitFactor, totalTrades) =>
    if useOrLogic
        (winRate >= minWinRate or profitFactor >= minProfitFactor) and totalTrades >= minTotalTrades
    else
        winRate >= minWinRate and profitFactor >= minProfitFactor and totalTrades >= minTotalTrades

// Plot badge for active patterns
plotBadge(condition, patternName, direction, winRate) =>
    if condition and array.includes(activePatterns, patternName)
        if direction == "BUY" and showBuyBadges
            label.new(bar_index, low - ta.atr(14) * 0.5, "BUY\n" + patternName, 
                     style=label.style_label_up, color=buyColor, textcolor=color.white, size=size.small)
        else if direction == "SELL" and showSellBadges
            label.new(bar_index, high + ta.atr(14) * 0.5, "SELL\n" + patternName, 
                     style=label.style_label_down, color=sellColor, textcolor=color.white, size=size.small)

// Add pattern to active list if it meets criteria (regardless of current occurrence)
addActivePattern(patternName, winRate, profitFactor, totalTrades) =>
    if meetsCriteria(winRate, profitFactor, totalTrades)
        if not array.includes(activePatterns, patternName)
            array.push(activePatterns, patternName)
            array.push(activeWinRates, winRate)
            array.push(activeProfitFactors, profitFactor)

// Check if pattern should generate signal (occurs AND is profitable)
checkPatternSignal(condition, patternName, direction, winRate, profitFactor, totalTrades) =>
    shouldSignal = false
    if condition and meetsCriteria(winRate, profitFactor, totalTrades) and enableDynamicSignals
        shouldSignal := true
    [shouldSignal, direction]

// ═══════════════════ CANDLESTICK CALCULATIONS ═══════════════════
C_Len = 14
C_ShadowPercent = 5.0
C_DojiBodyPercent = 5.0
C_Factor = 2.0

C_BodyHi = math.max(close, open)
C_BodyLo = math.min(close, open)
C_Body = C_BodyHi - C_BodyLo
C_BodyAvg = ta.ema(C_Body, C_Len)
C_SmallBody = C_Body < C_BodyAvg
C_LongBody = C_Body > C_BodyAvg
C_UpShadow = high - C_BodyHi
C_DnShadow = C_BodyLo - low
C_HasUpShadow = C_UpShadow > C_ShadowPercent / 100 * C_Body
C_HasDnShadow = C_DnShadow > C_ShadowPercent / 100 * C_Body
C_WhiteBody = open < close
C_BlackBody = open > close
C_Range = high - low
C_BodyMiddle = C_Body / 2 + C_BodyLo
C_IsDojiBody = C_Range > 0 and C_Body <= C_Range * C_DojiBodyPercent / 100
C_Doji = C_IsDojiBody

// Trend detection
sma50 = ta.sma(close, 50)
C_UpTrend = close > sma50
C_DownTrend = close < sma50

// ═══════════════════ PATTERN DEFINITIONS ═══════════════════

// Hammer
C_Hammer = C_SmallBody and C_Body > 0 and C_BodyLo > hl2 and C_DnShadow >= C_Factor * C_Body and not C_HasUpShadow and C_DownTrend
[netP_Hammer, pf_Hammer, trades_Hammer, wr_Hammer] = backtest(C_Hammer, true)

// Hanging Man
C_HangingMan = C_SmallBody and C_Body > 0 and C_BodyLo > hl2 and C_DnShadow >= C_Factor * C_Body and not C_HasUpShadow and C_UpTrend
[netP_HangingMan, pf_HangingMan, trades_HangingMan, wr_HangingMan] = backtest(C_HangingMan, false)

// Shooting Star
C_ShootingStar = C_SmallBody and C_Body > 0 and C_BodyHi < hl2 and C_UpShadow >= C_Factor * C_Body and not C_HasDnShadow and C_UpTrend
[netP_ShootingStar, pf_ShootingStar, trades_ShootingStar, wr_ShootingStar] = backtest(C_ShootingStar, false)

// Inverted Hammer
C_InvertedHammer = C_SmallBody and C_Body > 0 and C_BodyHi < hl2 and C_UpShadow >= C_Factor * C_Body and not C_HasDnShadow and C_DownTrend
[netP_InvertedHammer, pf_InvertedHammer, trades_InvertedHammer, wr_InvertedHammer] = backtest(C_InvertedHammer, true)

// Doji Star Bullish
C_DojiStarBullish = C_DownTrend and C_BlackBody[1] and C_LongBody[1] and C_IsDojiBody and C_BodyHi < C_BodyLo[1]
[netP_DojiStarBullish, pf_DojiStarBullish, trades_DojiStarBullish, wr_DojiStarBullish] = backtest(C_DojiStarBullish, true)

// Doji Star Bearish
C_DojiStarBearish = C_UpTrend and C_WhiteBody[1] and C_LongBody[1] and C_IsDojiBody and C_BodyLo > C_BodyHi[1]
[netP_DojiStarBearish, pf_DojiStarBearish, trades_DojiStarBearish, wr_DojiStarBearish] = backtest(C_DojiStarBearish, false)

// Engulfing Bullish
C_EngulfingBullish = C_DownTrend[1] and C_BlackBody[1] and C_WhiteBody and C_LongBody and C_BodyLo <= open[1] and C_BodyHi >= close[1]
[netP_EngulfingBullish, pf_EngulfingBullish, trades_EngulfingBullish, wr_EngulfingBullish] = backtest(C_EngulfingBullish, true)

// Engulfing Bearish
C_EngulfingBearish = C_UpTrend[1] and C_WhiteBody[1] and C_BlackBody and C_LongBody and C_BodyHi >= open[1] and C_BodyLo <= close[1]
[netP_EngulfingBearish, pf_EngulfingBearish, trades_EngulfingBearish, wr_EngulfingBearish] = backtest(C_EngulfingBearish, false)

// Piercing
C_Piercing = C_DownTrend[1] and C_BlackBody[1] and C_LongBody[1] and C_WhiteBody and open <= low[1] and close > C_BodyMiddle[1] and close < open[1]
[netP_Piercing, pf_Piercing, trades_Piercing, wr_Piercing] = backtest(C_Piercing, true)

// Dark Cloud Cover
C_DarkCloudCover = C_UpTrend[1] and C_WhiteBody[1] and C_LongBody[1] and C_BlackBody and open >= high[1] and close < C_BodyMiddle[1] and close > open[1]
[netP_DarkCloudCover, pf_DarkCloudCover, trades_DarkCloudCover, wr_DarkCloudCover] = backtest(C_DarkCloudCover, false)

// Three White Soldiers
C_ThreeWhiteSoldiers = C_WhiteBody and C_WhiteBody[1] and C_WhiteBody[2] and C_LongBody and C_LongBody[1] and C_LongBody[2] and close > close[1] and close[1] > close[2] and open < close[1] and open > open[1] and open[1] < close[2] and open[1] > open[2]
[netP_ThreeWhiteSoldiers, pf_ThreeWhiteSoldiers, trades_ThreeWhiteSoldiers, wr_ThreeWhiteSoldiers] = backtest(C_ThreeWhiteSoldiers, true)

// Three Black Crows
C_ThreeBlackCrows = C_BlackBody and C_BlackBody[1] and C_BlackBody[2] and C_LongBody and C_LongBody[1] and C_LongBody[2] and close < close[1] and close[1] < close[2] and open > close[1] and open < open[1] and open[1] > close[2] and open[1] < open[2]
[netP_ThreeBlackCrows, pf_ThreeBlackCrows, trades_ThreeBlackCrows, wr_ThreeBlackCrows] = backtest(C_ThreeBlackCrows, false)

// ═══════════════════ SIGNAL RESET ═══════════════════
dynamicBuySignal := false
dynamicSellSignal := false

// ═══════════════════ PATTERN PROCESSING ═══════════════════
if barstate.isconfirmed
    array.clear(activePatterns)
    array.clear(activeWinRates)
    array.clear(activeProfitFactors)
    
    // Add all profitable patterns to active list (regardless of current occurrence)
    addActivePattern("Hammer", wr_Hammer, pf_Hammer, trades_Hammer)
    addActivePattern("Hanging Man", wr_HangingMan, pf_HangingMan, trades_HangingMan)
    addActivePattern("Shooting Star", wr_ShootingStar, pf_ShootingStar, trades_ShootingStar)
    addActivePattern("Inverted Hammer", wr_InvertedHammer, pf_InvertedHammer, trades_InvertedHammer)
    addActivePattern("Doji Star Bull", wr_DojiStarBullish, pf_DojiStarBullish, trades_DojiStarBullish)
    addActivePattern("Doji Star Bear", wr_DojiStarBearish, pf_DojiStarBearish, trades_DojiStarBearish)
    addActivePattern("Engulfing Bull", wr_EngulfingBullish, pf_EngulfingBullish, trades_EngulfingBullish)
    addActivePattern("Engulfing Bear", wr_EngulfingBearish, pf_EngulfingBearish, trades_EngulfingBearish)
    addActivePattern("Piercing", wr_Piercing, pf_Piercing, trades_Piercing)
    addActivePattern("Dark Cloud", wr_DarkCloudCover, pf_DarkCloudCover, trades_DarkCloudCover)
    addActivePattern("3 White Soldiers", wr_ThreeWhiteSoldiers, pf_ThreeWhiteSoldiers, trades_ThreeWhiteSoldiers)
    addActivePattern("3 Black Crows", wr_ThreeBlackCrows, pf_ThreeBlackCrows, trades_ThreeBlackCrows)

// Check for signals on every bar (pattern occurrence + profitability)
[signal1, dir1] = checkPatternSignal(C_Hammer, "Hammer", "BUY", wr_Hammer, pf_Hammer, trades_Hammer)
[signal2, dir2] = checkPatternSignal(C_HangingMan, "Hanging Man", "SELL", wr_HangingMan, pf_HangingMan, trades_HangingMan)
[signal3, dir3] = checkPatternSignal(C_ShootingStar, "Shooting Star", "SELL", wr_ShootingStar, pf_ShootingStar, trades_ShootingStar)
[signal4, dir4] = checkPatternSignal(C_InvertedHammer, "Inverted Hammer", "BUY", wr_InvertedHammer, pf_InvertedHammer, trades_InvertedHammer)
[signal5, dir5] = checkPatternSignal(C_DojiStarBullish, "Doji Star Bull", "BUY", wr_DojiStarBullish, pf_DojiStarBullish, trades_DojiStarBullish)
[signal6, dir6] = checkPatternSignal(C_DojiStarBearish, "Doji Star Bear", "SELL", wr_DojiStarBearish, pf_DojiStarBearish, trades_DojiStarBearish)
[signal7, dir7] = checkPatternSignal(C_EngulfingBullish, "Engulfing Bull", "BUY", wr_EngulfingBullish, pf_EngulfingBullish, trades_EngulfingBullish)
[signal8, dir8] = checkPatternSignal(C_EngulfingBearish, "Engulfing Bear", "SELL", wr_EngulfingBearish, pf_EngulfingBearish, trades_EngulfingBearish)
[signal9, dir9] = checkPatternSignal(C_Piercing, "Piercing", "BUY", wr_Piercing, pf_Piercing, trades_Piercing)
[signal10, dir10] = checkPatternSignal(C_DarkCloudCover, "Dark Cloud", "SELL", wr_DarkCloudCover, pf_DarkCloudCover, trades_DarkCloudCover)
[signal11, dir11] = checkPatternSignal(C_ThreeWhiteSoldiers, "3 White Soldiers", "BUY", wr_ThreeWhiteSoldiers, pf_ThreeWhiteSoldiers, trades_ThreeWhiteSoldiers)
[signal12, dir12] = checkPatternSignal(C_ThreeBlackCrows, "3 Black Crows", "SELL", wr_ThreeBlackCrows, pf_ThreeBlackCrows, trades_ThreeBlackCrows)

// Set global signals based on pattern results
if signal1 and dir1 == "BUY" or signal4 and dir4 == "BUY" or signal5 and dir5 == "BUY" or signal7 and dir7 == "BUY" or signal9 and dir9 == "BUY" or signal11 and dir11 == "BUY"
    dynamicBuySignal := true

if signal2 and dir2 == "SELL" or signal3 and dir3 == "SELL" or signal6 and dir6 == "SELL" or signal8 and dir8 == "SELL" or signal10 and dir10 == "SELL" or signal12 and dir12 == "SELL"
    dynamicSellSignal := true

// ═══════════════════ BADGE PLOTTING ═══════════════════
plotBadge(C_Hammer, "Hammer", "BUY", wr_Hammer)
plotBadge(C_HangingMan, "Hanging Man", "SELL", wr_HangingMan)
plotBadge(C_ShootingStar, "Shooting Star", "SELL", wr_ShootingStar)
plotBadge(C_InvertedHammer, "Inverted Hammer", "BUY", wr_InvertedHammer)
plotBadge(C_DojiStarBullish, "Doji Star Bull", "BUY", wr_DojiStarBullish)
plotBadge(C_DojiStarBearish, "Doji Star Bear", "SELL", wr_DojiStarBearish)
plotBadge(C_EngulfingBullish, "Engulfing Bull", "BUY", wr_EngulfingBullish)
plotBadge(C_EngulfingBearish, "Engulfing Bear", "SELL", wr_EngulfingBearish)
plotBadge(C_Piercing, "Piercing", "BUY", wr_Piercing)
plotBadge(C_DarkCloudCover, "Dark Cloud", "SELL", wr_DarkCloudCover)
plotBadge(C_ThreeWhiteSoldiers, "3 White Soldiers", "BUY", wr_ThreeWhiteSoldiers)
plotBadge(C_ThreeBlackCrows, "3 Black Crows", "SELL", wr_ThreeBlackCrows)

// ═══════════════════ ACTIVE PATTERNS TABLE ═══════════════════
if showActiveTable and barstate.islast
    table.cell(activeTable, 0, 0, "Active Patterns", text_color=color.white, bgcolor=color.gray)
    table.cell(activeTable, 1, 0, "Win Rate", text_color=color.white, bgcolor=color.gray)
    table.cell(activeTable, 2, 0, "Profit Factor", text_color=color.white, bgcolor=color.gray)
    table.cell(activeTable, 3, 0, "Direction", text_color=color.white, bgcolor=color.gray)
    
    if array.size(activePatterns) > 0
        for i = 0 to math.min(array.size(activePatterns) - 1, 15)
            patternName = array.get(activePatterns, i)
            winRate = array.get(activeWinRates, i)
            profitFactor = array.get(activeProfitFactors, i)
            
            table.cell(activeTable, 0, i + 1, patternName, text_color=color.white, bgcolor=color.new(color.gray, 50))
            table.cell(activeTable, 1, i + 1, str.tostring(winRate * 100, "#.#") + "%", text_color=color.white, bgcolor=color.new(color.green, 70))
            table.cell(activeTable, 2, i + 1, str.tostring(profitFactor, "#.##"), text_color=color.white, bgcolor=color.new(color.blue, 70))
            table.cell(activeTable, 3, i + 1, str.contains(patternName, "Bull") or str.contains(patternName, "Hammer") or str.contains(patternName, "Piercing") or str.contains(patternName, "White") ? "BUY" : "SELL", text_color=color.white, bgcolor=color.new(color.orange, 70))
    else
        table.cell(activeTable, 0, 1, "No patterns meet criteria", text_color=color.white, bgcolor=color.red)
        table.merge_cells(activeTable, 0, 1, 3, 1)

// ═══════════════════ SIGNAL OUTPUT ═══════════════════
plot(dynamicBuySignal ? 1 : 0, title="Buy Signal", color=color.green, linewidth=2)
plot(dynamicSellSignal ? 1 : 0, title="Sell Signal", color=color.red, linewidth=2)

// ═══════════════════ DEBUG TABLE - ALL PATTERNS ═══════════════════
if showDebugTable and barstate.islast
    table.cell(debugTable, 0, 0, "All Patterns", text_color=color.white, bgcolor=color.gray)
    table.cell(debugTable, 1, 0, "Win Rate", text_color=color.white, bgcolor=color.gray)
    table.cell(debugTable, 2, 0, "Profit Factor", text_color=color.white, bgcolor=color.gray)
    table.cell(debugTable, 3, 0, "Total Trades", text_color=color.white, bgcolor=color.gray)
    table.cell(debugTable, 4, 0, "Net Profit", text_color=color.white, bgcolor=color.gray)
    
    // Show ALL patterns regardless of filter criteria
    patterns = array.from("Hammer", "Hanging Man", "Shooting Star", "Inverted Hammer", "Doji Star Bull", "Doji Star Bear", "Engulfing Bull", "Engulfing Bear", "Piercing", "Dark Cloud", "3 White Soldiers", "3 Black Crows")
    winRates = array.from(wr_Hammer, wr_HangingMan, wr_ShootingStar, wr_InvertedHammer, wr_DojiStarBullish, wr_DojiStarBearish, wr_EngulfingBullish, wr_EngulfingBearish, wr_Piercing, wr_DarkCloudCover, wr_ThreeWhiteSoldiers, wr_ThreeBlackCrows)
    profitFactors = array.from(pf_Hammer, pf_HangingMan, pf_ShootingStar, pf_InvertedHammer, pf_DojiStarBullish, pf_DojiStarBearish, pf_EngulfingBullish, pf_EngulfingBearish, pf_Piercing, pf_DarkCloudCover, pf_ThreeWhiteSoldiers, pf_ThreeBlackCrows)
    totalTrades = array.from(trades_Hammer, trades_HangingMan, trades_ShootingStar, trades_InvertedHammer, trades_DojiStarBullish, trades_DojiStarBearish, trades_EngulfingBullish, trades_EngulfingBearish, trades_Piercing, trades_DarkCloudCover, trades_ThreeWhiteSoldiers, trades_ThreeBlackCrows)
    netProfits = array.from(netP_Hammer, netP_HangingMan, netP_ShootingStar, netP_InvertedHammer, netP_DojiStarBullish, netP_DojiStarBearish, netP_EngulfingBullish, netP_EngulfingBearish, netP_Piercing, netP_DarkCloudCover, netP_ThreeWhiteSoldiers, netP_ThreeBlackCrows)
    
    for i = 0 to array.size(patterns) - 1
        patternName = array.get(patterns, i)
        winRate = array.get(winRates, i)
        profitFactor = array.get(profitFactors, i)
        trades = array.get(totalTrades, i)
        netProfit = array.get(netProfits, i)
        
        // Color coding: Green if meets criteria, Red if doesn't
        meetsFilter = meetsCriteria(winRate, profitFactor, trades)
        bgColor = meetsFilter ? color.new(color.green, 80) : color.new(color.red, 80)
        
        table.cell(debugTable, 0, i + 1, patternName, text_color=color.white, bgcolor=bgColor)
        table.cell(debugTable, 1, i + 1, str.tostring(winRate * 100, "#.#") + "%", text_color=color.white, bgcolor=bgColor)
        table.cell(debugTable, 2, i + 1, str.tostring(profitFactor, "#.##"), text_color=color.white, bgcolor=bgColor)
        table.cell(debugTable, 3, i + 1, str.tostring(trades, "#"), text_color=color.white, bgcolor=bgColor)
        table.cell(debugTable, 4, i + 1, str.tostring(netProfit, "#.#") + "%", text_color=color.white, bgcolor=bgColor)

// Alert conditions
alertcondition(dynamicBuySignal, title="Buy Signal", message="Profitable candlestick pattern detected - BUY")
alertcondition(dynamicSellSignal, title="Sell Signal", message="Profitable candlestick pattern detected - SELL")
