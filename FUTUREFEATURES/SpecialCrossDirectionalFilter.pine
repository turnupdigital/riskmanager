//@version=5
indicator("Special Cross Directional Filter", shorttitle="SC_Filter", overlay=false)

// ═══════════════════════════════════════════════════════════════════════════════
//                           SPECIAL CROSS DIRECTIONAL FILTER
// ═══════════════════════════════════════════════════════════════════════════════
// This indicator uses the Special Cross (EVWMA vs VWAP) for directional bias
// and filters external buy/sell signals based on that bias.
//
// Logic:
// - When bias is BULLISH: Buy signals = Entry, Sell signals = Exit
// - When bias is BEARISH: Sell signals = Entry, Buy signals = Exit
// ═══════════════════════════════════════════════════════════════════════════════

// ─────────────────── SPECIAL CROSS BIAS CALCULATION ───────────────────
grpBias = "Special Cross Bias Settings"
sum_length = input.int(30, title="EVWMA Length", group=grpBias)
vwap_smoothing = input.int(1, title="VWAP Smoothing", group=grpBias)

// Optimized VWAP smoothing - avoid unnecessary EMA calculation when smoothing=1
vwap_smooth = vwap_smoothing == 1 ? ta.vwap : ta.ema(ta.vwap, vwap_smoothing)

// Optimized EVWMA calculation - cache volume sum for better performance
vol_period = math.sum(volume, sum_length)
evwma = 0.0
evwma := nz(evwma[1], close) + (volume * (close - nz(evwma[1], close))) / vol_period

// Optimized bias calculation - single comparison with cached result
bias_diff = vwap_smooth - evwma
bias_bullish = bias_diff > 0
bias_bearish = bias_diff < 0

// Optimized bias change detection - cache previous state
prev_bias_bullish = bias_bullish[1]
bias_changed_to_bull = bias_bullish and not prev_bias_bullish
bias_changed_to_bear = bias_bearish and not (bias_diff[1] < 0)

// ─────────────────── EXTERNAL SIGNAL INPUTS ───────────────────────────
grpSignals = "External Signal Sources"
buy_signal_src = input.source(close, "Buy Signal Source", group=grpSignals, 
                 tooltip="Connect this to your external buy signal (e.g., UT Bot buy)")
sell_signal_src = input.source(close, "Sell Signal Source", group=grpSignals,
                  tooltip="Connect this to your external sell signal (e.g., UT Bot sell)")

// Signal detection (rising edge)
buy_signal_raw = nz(buy_signal_src, 0) != 0
sell_signal_raw = nz(sell_signal_src, 0) != 0

buy_signal = buy_signal_raw and not buy_signal_raw[1]
sell_signal = sell_signal_raw and not sell_signal_raw[1]

// ─────────────────── FILTER LOGIC ──────────────────────────────────────
grpFilter = "Filter Settings"
show_bias_changes = input.bool(true, "Show Bias Change Alerts", group=grpFilter)
use_bias_change_exit = input.bool(true, "Use Bias Change as Exit Signal", group=grpFilter,
                      tooltip="Exit opposite direction trades when bias changes")

// Apply directional filter
// When bias is BULLISH: buy signals become entries, sell signals become exits
// When bias is BEARISH: sell signals become entries, buy signals become exits

filtered_long_entry = bias_bullish and buy_signal
filtered_long_exit = bias_bullish and sell_signal
filtered_short_entry = bias_bearish and sell_signal  
filtered_short_exit = bias_bearish and buy_signal

// Bias change exits (exit opposite direction trades when bias flips)
bias_change_long_exit = use_bias_change_exit and bias_changed_to_bear  // Exit longs when bias turns bearish
bias_change_short_exit = use_bias_change_exit and bias_changed_to_bull  // Exit shorts when bias turns bullish

// Combined entry and exit signals for output
entry_signal = filtered_long_entry or filtered_short_entry
exit_signal = filtered_long_exit or filtered_short_exit or bias_change_long_exit or bias_change_short_exit

// ─────────────────── PROFESSIONAL VISUALIZATION ─────────────────────────────────────
var visualGroupName = '-----  Visual Settings  -----'
show_background = input.bool(true, "Enable Background Trend Color", group=visualGroupName)
show_bias_banner = input.bool(true, "Show Bias Status Badge", group=visualGroupName)
show_filtered_signals = input.bool(true, "Show Entry/Exit Signals", group=visualGroupName)
show_raw_signals = input.bool(false, "Show Raw Signals (Debug)", group=visualGroupName)

// Professional color scheme matching SimpleMarketMetrics
bullish_strong_bg = input.color(color.new(#66ff00, 75), 'Strong Bullish Background', group=visualGroupName)
bullish_weak_bg = input.color(color.new(#66ff00, 85), 'Weak Bullish Background', group=visualGroupName)
bearish_strong_bg = input.color(color.new(#ff0000, 75), 'Strong Bearish Background', group=visualGroupName)
bearish_weak_bg = input.color(color.new(#ff0000, 85), 'Weak Bearish Background', group=visualGroupName)

// Badge colors
badge_bullish_color = input.color(color.new(#089981, 0), 'Bullish Badge Color', group=visualGroupName)
badge_bearish_color = input.color(color.new(#f23645, 0), 'Bearish Badge Color', group=visualGroupName)
badge_neutral_color = input.color(color.new(color.gray, 0), 'Neutral Badge Color', group=visualGroupName)

// Signal colors
signal_buy_color = input.color(color.new(#4caf50, 0), 'Buy Signal Color', group=visualGroupName)
signal_sell_color = input.color(color.new(#b22833, 0), 'Sell Signal Color', group=visualGroupName)
signal_exit_color = input.color(color.new(color.yellow, 0), 'Exit Signal Color', group=visualGroupName)

// Determine trend strength for 4-color background system
trend_strength = math.abs(ta.rsi(close, 14) - 50) / 50  // 0 = weak, 1 = strong
is_strong_trend = trend_strength > 0.3

// Professional 4-color background system
background_color = show_background ? (bias_bullish and is_strong_trend ? bullish_strong_bg : bias_bullish and not is_strong_trend ? bullish_weak_bg : bias_bearish and is_strong_trend ? bearish_strong_bg : bias_bearish and not is_strong_trend ? bearish_weak_bg : na) : na

bgcolor(background_color, force_overlay = true)

// Bias value for output (1 = bullish, -1 = bearish, 0 = neutral)
bias_value = bias_bullish ? 1 : bias_bearish ? -1 : 0

// Pre-calculate values outside of conditional scope to avoid warnings
// Use safer approach to avoid historical buffer limit errors
highest_high = ta.highest(high, 50)

// Professional bias status badge - positioned like SimpleMarketMetrics
if show_bias_banner and barstate.islast
    // Use simple offset from current bar to avoid buffer limit issues
    badge_x = bar_index - 10  // Fixed offset from current bar
    badge_y = highest_high * 1.02  // Above recent highs
    
    // Professional badge text and colors
    badge_text = bias_bullish ? "LONG BIAS" : bias_bearish ? "SHORT BIAS" : "NEUTRAL"
    badge_bg = bias_bullish ? badge_bullish_color : bias_bearish ? badge_bearish_color : badge_neutral_color
    badge_text_color = color.white
    
    // Create professional badge with border
    var label bias_badge = na
    if na(bias_badge)
        bias_badge := label.new(badge_x, badge_y, badge_text, 
                               color=badge_bg, 
                               textcolor=badge_text_color, 
                               style=label.style_label_center,
                               size=size.large)
    else
        label.set_xy(bias_badge, badge_x, badge_y)
        label.set_text(bias_badge, badge_text)
        label.set_color(bias_badge, badge_bg)

// Professional signal visualization matching SimpleMarketMetrics quality
plotshape(show_filtered_signals and filtered_long_entry, "Buy Signal", 
          shape.labelup, location.belowbar, signal_buy_color, 
          text="BUY", textcolor=color.white, size=size.normal)
plotshape(show_filtered_signals and filtered_short_entry, "Sell Signal", 
          shape.labeldown, location.abovebar, signal_sell_color, 
          text="SELL", textcolor=color.white, size=size.normal)
plotshape(show_filtered_signals and filtered_long_exit, "Long Exit", 
          shape.xcross, location.abovebar, signal_exit_color, size=size.small)
plotshape(show_filtered_signals and filtered_short_exit, "Short Exit", 
          shape.xcross, location.belowbar, signal_exit_color, size=size.small)

// Plot bias change exits
plotshape(show_filtered_signals and bias_change_long_exit, "Bias Exit Long", 
          shape.diamond, location.top, color.white, size=size.normal)
plotshape(show_filtered_signals and bias_change_short_exit, "Bias Exit Short", 
          shape.diamond, location.bottom, color.white, size=size.normal)

// Plot bias changes with enhanced visibility
plotshape(show_bias_changes and bias_changed_to_bull, "Bias → Bull", 
          shape.arrowup, location.bottom, color.green, size=size.huge)
plotshape(show_bias_changes and bias_changed_to_bear, "Bias → Bear", 
          shape.arrowdown, location.top, color.red, size=size.huge)

// Debug: Show raw signals if enabled
plotchar(show_raw_signals and buy_signal, "Raw Buy", "B", location.bottom, color.blue, size=size.tiny)
plotchar(show_raw_signals and sell_signal, "Raw Sell", "S", location.top, color.purple, size=size.tiny)

// ─────────────────── OUTPUT PLOTS FOR EXTERNAL USE ────────────────────
// These plots can be used as inputs to other indicators/strategies
plot(filtered_long_entry ? 1 : 0, "Long Entry Output", display=display.data_window)
plot(filtered_short_entry ? 1 : 0, "Short Entry Output", display=display.data_window)
plot(filtered_long_exit ? 1 : 0, "Long Exit Output", display=display.data_window)
plot(filtered_short_exit ? 1 : 0, "Short Exit Output", display=display.data_window)
plot(bias_change_long_exit ? 1 : 0, "Bias Change Long Exit Output", display=display.data_window)
plot(bias_change_short_exit ? 1 : 0, "Bias Change Short Exit Output", display=display.data_window)
plot(entry_signal ? 1 : 0, "Any Entry Output", display=display.data_window)
plot(exit_signal ? 1 : 0, "Any Exit Output", display=display.data_window)
plot(bias_value, "Bias Output", display=display.data_window)

// ─────────────────── ALERTS ────────────────────────────────────────────
// Alert conditions for external automation
alertcondition(filtered_long_entry, "Long Entry Alert", "Special Cross Filter: Long Entry Signal")
alertcondition(filtered_short_entry, "Short Entry Alert", "Special Cross Filter: Short Entry Signal")
alertcondition(filtered_long_exit, "Long Exit Alert", "Special Cross Filter: Long Exit Signal")
alertcondition(filtered_short_exit, "Short Exit Alert", "Special Cross Filter: Short Exit Signal")
alertcondition(bias_change_long_exit, "Bias Change Long Exit Alert", "Special Cross Filter: Bias Change - Exit Long Position")
alertcondition(bias_change_short_exit, "Bias Change Short Exit Alert", "Special Cross Filter: Bias Change - Exit Short Position")
alertcondition(bias_changed_to_bull, "Long Bias Alert", "Special Cross Filter: Bias changed to LONG BIAS")
alertcondition(bias_changed_to_bear, "Short Bias Alert", "Special Cross Filter: Bias changed to SHORT BIAS")

// ─────────────────── TABLE DISPLAY (OPTIONAL) ──────────────────────────
grpTable = "Status Table"
show_table = input.bool(true, "Show Status Table", group=grpTable)
table_position = input.string("top_right", "Table Position", 
                 options=["top_left", "top_center", "top_right", "middle_left", "middle_center", "middle_right", "bottom_left", "bottom_center", "bottom_right"], 
                 group=grpTable)

if show_table and barstate.islast
    pos = table_position == "top_left" ? position.top_left :
          table_position == "top_center" ? position.top_center :
          table_position == "top_right" ? position.top_right :
          table_position == "middle_left" ? position.middle_left :
          table_position == "middle_center" ? position.middle_center :
          table_position == "middle_right" ? position.middle_right :
          table_position == "bottom_left" ? position.bottom_left :
          table_position == "bottom_center" ? position.bottom_center :
          position.bottom_right
    
    var table status_table = table.new(pos, 2, 4, bgcolor=color.white, border_width=1)
    
    table.cell(status_table, 0, 0, "Status", text_color=color.black, bgcolor=color.gray)
    table.cell(status_table, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    
    bias_text = bias_bullish ? "LONG BIAS" : bias_bearish ? "SHORT BIAS" : "NEUTRAL"
    bias_color = bias_bullish ? color.green : bias_bearish ? color.red : color.white
    table.cell(status_table, 0, 1, "Bias", text_color=color.black)
    table.cell(status_table, 1, 1, bias_text, text_color=bias_color)
    
    last_signal = filtered_long_entry ? "LONG ENTRY" : 
                  filtered_short_entry ? "SHORT ENTRY" :
                  filtered_long_exit ? "LONG EXIT" :
                  filtered_short_exit ? "SHORT EXIT" :
                  bias_change_long_exit ? "BIAS EXIT LONG" :
                  bias_change_short_exit ? "BIAS EXIT SHORT" : "NONE"
    signal_color = filtered_long_entry ? color.green :
                   filtered_short_entry ? color.red :
                   (filtered_long_exit or filtered_short_exit) ? color.white :
                   (bias_change_long_exit or bias_change_short_exit) ? color.white : color.white
    table.cell(status_table, 0, 2, "Last Signal", text_color=color.black)
    table.cell(status_table, 1, 2, last_signal, text_color=signal_color)
    
    table.cell(status_table, 0, 3, "EVWMA", text_color=color.black)
    table.cell(status_table, 1, 3, str.tostring(evwma, "#.####"), text_color=color.blue)
