// This work is licensed under Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © Trendoscope
//                                       ░▒             
//                                  ▒▒▒   ▒▒      
//                              ▒▒▒▒▒     ▒▒      
//                      ▒▒▒▒▒▒▒░     ▒     ▒▒          
//                  ▒▒▒▒▒▒           ▒     ▒▒          
//             ▓▒▒▒       ▒        ▒▒▒▒▒▒▒▒▒▒▒  
//   ▒▒▒▒▒▒▒▒▒▒▒ ▒        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒         
//   ▒  ▒       ░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░        
//   ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░▒▒▒▒▒▒▒▒         
//   ▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ ▒▒                       
//    ▒▒▒▒▒         ▒▒▒▒▒▒▒                            
//                 ▒▒▒▒▒▒▒▒▒                           
//                ▒▒▒▒▒ ▒▒▒▒▒                          
//               ░▒▒▒▒   ▒▒▒▒▓      ████████╗██████╗ ███████╗███╗   ██╗██████╗  ██████╗ ███████╗ ██████╗ ██████╗ ██████╗ ███████╗
//              ▓▒▒▒▒     ▒▒▒▒      ╚══██╔══╝██╔══██╗██╔════╝████╗  ██║██╔══██╗██╔═══██╗██╔════╝██╔════╝██╔═══██╗██╔══██╗██╔════╝
//              ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒        ██║   ██████╔╝█████╗  ██╔██╗ ██║██║  ██║██║   ██║███████╗██║     ██║   ██║██████╔╝█████╗ 
//             ▒▒▒▒▒       ▒▒▒▒▒       ██║   ██╔══██╗██╔══╝  ██║╚██╗██║██║  ██║██║   ██║╚════██║██║     ██║   ██║██╔═══╝ ██╔══╝  
//            ▒▒▒▒▒         ▒▒▒▒▒      ██║   ██║  ██║███████╗██║ ╚████║██████╔╝╚██████╔╝███████║╚██████╗╚██████╔╝██║     ███████╗
//             ▒▒             ▒                        
//@version=5
import HeWhoMustNotBeNamed/DrawingTypes/2 as dr
import HeWhoMustNotBeNamed/DrawingMethods/2
import HeWhoMustNotBeNamed/ZigzagTypes/5 as zg
import HeWhoMustNotBeNamed/ZigzagMethods/6
import HeWhoMustNotBeNamed/ta/1 as eta
indicator("Zigzag Tails [Trendoscope®]", 'ZT[Trendoscope®]', overlay=true, max_lines_count = 500, max_labels_count = 500, max_polylines_count = 100)

zigzagLength = input.int(21, 'Zigzag Length',  group = 'Zigzag', tooltip = 'Length on which the zigzag is calculated', display = display.none)
limitBars = input.int(5000, 'Number of Bars', group='Zigzag', tooltip = 'Number of bars for which indicator needs to be calculated. This is put in place to avoid getting runtime error.', display = display.none)
repaint = input.bool(false, 'Repaint',
     'If selected, the last moving pivot of the zigzag is shown and the tails are calculated. But, '+
     'if the zigzag direction changes, then the tails and zigzag pivot will repaint', group='Zigzag', display = display.none)

tailType = input.string('vwap', 'Tail Type', ['vwap', 'average'], 'Select the type of tail - vwap or average', group='Anchored Values', inline='t', display = display.none)

showMaHigh = input.bool(true, 'High ', inline='d1', group='Anchored Values', display = display.none)
maHighColor = input.color(color.green, '', inline='d1', group = 'Anchored Values', display = display.none, tooltip = 'Select this option to display tail based on high price of each candles')

showMaLow = input.bool(true, 'Low  ', inline='d2', group='Anchored Values', display = display.none)
maLowColor = input.color(color.red, '', inline='d2', group = 'Anchored Values', display = display.none, tooltip = 'Select this option to display tail based on low price of each candles')

showMaClose = input.bool(true, 'Close', inline='d3', group='Anchored Values', display = display.none)
maCloseColor = input.color(color.blue, '', inline='d3', group = 'Anchored Values', display = display.none, tooltip = 'Select this option to display tail based on close price of each candles')

textColor = chart.bg_color

type Ohlcv
    float _open = open
    float _high = high
    float _low = low
    float _close = close
    float _volume = volume

type ZigzagDrawing
    array<chart.point> pricePoints
    array<polyline> closeMaLines
    array<polyline> highMaLines
    array<polyline> lowMaLines
    polyline priceLine

type ZigzagProperties
    color textColor = color.black
    bool repaint = false
    string tailType = "vwap"
    bool showHigh = true
    bool showLow = true
    bool showClose = true
    color highColor = color.green
    color lowColor = color.red
    color closeColor = color.purple

var map<int, Ohlcv> ohlcvMap = map.new<int, Ohlcv>()

method getAnchoredMovingAverage(ZigzagProperties this, int fromBar, int toBar)=>
    closePoints = array.new<chart.point>()
    highPoints = array.new<chart.point>()
    lowPoints = array.new<chart.point>()
    vwapPoints = array.new<chart.point>()
    volumeCloseSum = 0.0
    volumeSum = 0.0
    volumeHighSum = 0.0
    volumeLowSum = 0.0
    for i = fromBar to toBar
        ohlcv = ohlcvMap.get(i)
        
        currentVolume = (this.tailType == 'average'? 1 : nz(ohlcv._volume, 1))
        volumeCloseSum += ohlcv._close*currentVolume
        volumeHighSum += ohlcv._high*currentVolume
        volumeLowSum += ohlcv._low*currentVolume
        volumeSum += currentVolume
        closeVal = volumeCloseSum/volumeSum
        highVal = volumeHighSum/volumeSum
        lowVal = volumeLowSum/volumeSum

        highPoints.push(chart.point.from_index(i, highVal))
        lowPoints.push(chart.point.from_index(i, lowVal))
        closePoints.push(chart.point.from_index(i, closeVal))

    [highPoints, lowPoints, closePoints]

method addPivot(ZigzagDrawing this, zg.Zigzag zigzag, ZigzagProperties properties, int index)=>
    if(zigzag.zigzagPivots.size() > index)
        currentPivot = zigzag.zigzagPivots.get(index)
        this.pricePoints.push(chart.point.new(currentPivot.point.bartime, currentPivot.point.bar, currentPivot.point.price))
        fromBar = zigzag.zigzagPivots.size() > index+1 ? zigzag.zigzagPivots.get(index+1).point.bar : math.max(0, last_bar_index - limitBars)
        toBar = currentPivot.point.bar
        [highPoints, lowPoints, closePoints] = properties.getAnchoredMovingAverage(fromBar, toBar)
        if(properties.showHigh)
            this.highMaLines.push(polyline.new(highPoints, line_color = properties.highColor))
        if(properties.showLow)
            this.lowMaLines.push(polyline.new(lowPoints, line_color = properties.lowColor))
        if(properties.showClose)
            this.closeMaLines.push(polyline.new(closePoints, line_color = properties.closeColor))
        
method drawcontinuous(zg.Zigzag this, ZigzagProperties properties)=>
    var drawing = ZigzagDrawing.new(array.new<chart.point>(), array.new<polyline>(), array.new<polyline>(), array.new<polyline>())
    startIndex = properties.repaint? 0 : 1
    if(this.flags.updateLastPivot and properties.repaint)
        drawing.pricePoints.pop()
        if(properties.showClose)
            drawing.closeMaLines.pop().delete()
        if(properties.showHigh)
            drawing.highMaLines.pop().delete()
        if(properties.showLow)
            drawing.lowMaLines.pop().delete()
    if(this.flags.newPivot and (not this.flags.updateLastPivot or properties.repaint))
        if(this.flags.doublePivot)
            drawing.addPivot(this, properties, startIndex+1)
        drawing.addPivot(this, properties, startIndex)
        drawing.priceLine.delete()
        drawing.priceLine := polyline.new(drawing.pricePoints, false, false, xloc.bar_time, color.yellow, line_style = line.style_solid, line_width = 1)

    if(drawing.pricePoints.size() > 0)
        lastPricePoint = drawing.pricePoints.last()
        var polyline highMa = na
        var polyline lowMa = na
        var polyline closeMa = na
        highMa.delete()
        lowMa.delete()
        closeMa.delete()
        if(bar_index > lastPricePoint.index)
            [highPoints, lowPoints, closePoints] = properties.getAnchoredMovingAverage(lastPricePoint.index, bar_index)
            if(properties.showClose)
                closeMa := polyline.new(closePoints, line_color = properties.closeColor, line_width = 2, line_style = line.style_dotted)
            if(properties.showHigh)
                highMa := polyline.new(highPoints, line_color = properties.highColor, line_width = 2, line_style = line.style_dotted)
            if(properties.showLow)
                lowMa := polyline.new(lowPoints, line_color = properties.lowColor, line_width = 2, line_style = line.style_dotted)

if(bar_index >= last_bar_index-limitBars)
    ohlcvMap.put(bar_index, Ohlcv.new())
    indicators = matrix.new<float>()
    indicatorNames = array.new<string>()
    var zg.Zigzag zigzag = zg.Zigzag.new(zigzagLength, 10, 0)
    var ZigzagProperties properties = ZigzagProperties.new(textColor, repaint, tailType, showMaHigh, showMaLow, showMaClose)
    zigzag.calculate(array.from(high, low), indicators, indicatorNames)
    zigzag.drawcontinuous(properties)
